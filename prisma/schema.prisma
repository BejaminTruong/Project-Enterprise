// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id Int @id @default(autoincrement())
  name String
  description String
  ideas Idea[]
  deleted Boolean @default(false)
  @@map("catogories")
}

model Submission {
  id Int @id @default(autoincrement())
  name String
  description String
  closureDate DateTime @db.Date @map("closure_date")
  finalClosureDate DateTime @db.Date @map("final_closure_date")
  ideas Idea[]
  deleted Boolean @default(false)
  @@map("submissions")
}

model Department{
  id Int @id @default(autoincrement())
  name String
  users User[]
  deleted Boolean @default(false)
  @@map("departments")
}

model File{
  id Int @id @default(autoincrement())
  filePath String @map("file_path")
  createdDate DateTime @default(now()) @map("created_date")
  lastModifiedDate DateTime @updatedAt @map("last_modified_date")
  idea Idea @relation(fields: [ideaId], references: [id])
  ideaId Int
  deleted Boolean @default(false)
  @@map("files")
}

model Idea{
  id Int @id @default(autoincrement())
  title String
  description String
  content String
  createdDate DateTime @default(now()) @map("created_date")
  lastModifiedDate DateTime @updatedAt @map("last_modified_date")
  anonymous Boolean @default(false)
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  submission Submission @relation(fields: [submissionId], references: [id])
  submissionId Int
  user User @relation(fields: [userId], references: [id])
  userId Int
  files File[]
  views View[]
  comments Comment[]
  reactions Reaction[]
  deleted Boolean @default(false)
  @@map("ideas")
}

model User{
  id Int @id @default(autoincrement())
  fullName String @map("fullname")
  staffId String @unique @map("staff_id")
  email String @unique
  password String
  avatar String?
  roles Role[]
  departments Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  ideas Idea[]
  views View[]
  comments Comment[]
  reactions Reaction[]
  deleted Boolean @default(false)
  @@map("users")
}

model Role{
  id Int @id @default(autoincrement())
  name String
  users User[]
  deleted Boolean @default(false)
  @@map("roles")
}

model View{
  id Int @id @default(autoincrement())
  lastVisitedDate DateTime @updatedAt @map("last_visited_date")
  user User @relation(fields: [userId], references: [id])
  userId Int
  idea Idea @relation(fields: [ideaId], references: [id])
  ideaId Int
  deleted Boolean @default(false)
  @@map("views")
}

model Comment{
  id Int @id @default(autoincrement())
  content String
  createdDate DateTime @default(now()) @map("created_date")
  lastModifiedDate DateTime @updatedAt @map("last_modified_date")
  anonymous Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  userId Int
  idea Idea @relation(fields: [ideaId], references: [id])
  ideaId Int
  comment Comment? @relation("CommentReplies",fields: [commentId], references: [id])
  commentId Int?
  replyId Comment[] @relation("CommentReplies")
  deleted Boolean @default(false)
  @@map("comments")
}

model Reaction{
  id Int @id @default(autoincrement())
  reaction Boolean?
  createdDate DateTime @default(now()) @map("created_date")
  user User @relation(fields: [userId], references: [id])
  userId Int
  idea Idea @relation(fields: [ideaId], references: [id])
  ideaId Int
  deleted Boolean @default(false)
  @@map("reactions")
}